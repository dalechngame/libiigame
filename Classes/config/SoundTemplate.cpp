#include "SoundTemplate.h"

void SoundTemplate::InitData(void)
{
    isInstance = lastLoadLanguage != ConfigLanguageSetting::instance().getCurLanguageName() ? false : isInstance;
    
    if(isInstance)
        return;
    
    Release();
    lastLoadLanguage = ConfigLanguageSetting::instance().getCurLanguageName();
    isInstance		 = true;
    SoundTemplate* temp;
    
    temp = new SoundTemplate();
    temp->Key = "BG:bg001";
    temp->Name = "sound/BGM_01.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "BG:bg002";
    temp->Name = "sound/BGM_02.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "BG:bg003";
    temp->Name = "sound/BGM_03.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "BG:bg004";
    temp->Name = "sound/BGM_04.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:button01";
    temp->Name = "sound/Common_button.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:button";
    temp->Name = "sound/Common_button.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:button02";
    temp->Name = "sound/Common_button2.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:windowIn";
    temp->Name = "sound/Common_popup.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 1.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "Common:windowIn";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:windowOut";
    temp->Name = "sound/Common_close.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 1.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "Common:windowOut";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:slideIn";
    temp->Name = "sound/Common_slidein.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:slideOut";
    temp->Name = "sound/Common_slideout.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:subjectIn";
    temp->Name = "sound/Common_subjectin.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:subjectOut";
    temp->Name = "sound/Common_subjectout.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:pickRight";
    temp->Name = "sound/Common_pickright.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.7f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "Common:pickRight";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:pickRong";
    temp->Name = "sound/Common_pickwrong.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 5.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "Common:pickRong";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:finish";
    temp->Name = "sound/Common_finish.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:camera";
    temp->Name = "sound/Common_camera.wav";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:tips01";
    temp->Name = "sound/Common_tips01.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:tips02";
    temp->Name = "sound/Common_tips02.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:bling";
    temp->Name = "sound/Common_bling.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 1.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "Common:bling";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:bling2";
    temp->Name = "sound/Common_bling2.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 1.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "Common:bling2";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:star";
    temp->Name = "sound/Common_star.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:unlock";
    temp->Name = "sound/Common_bling2.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:buy";
    temp->Name = "sound/Common_buy.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:shine";
    temp->Name = "sound/Common_shine.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.3f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:metalput";
    temp->Name = "sound/Common_metalput.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P004:metalput";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:button";
    temp->Name = "sound/Common_button.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:camera";
    temp->Name = "sound/Common_camera.wav";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:close";
    temp->Name = "sound/Common_close.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:popup";
    temp->Name = "sound/Common_popup.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Common:cute";
    temp->Name = "sound/Common_tips02.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = ":";
    temp->Name = "";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "General:stroke";
    temp->Name = "sound/General_stroke.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.7f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "General:stroke";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "General:comb";
    temp->Name = "sound/General_comb.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.7f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "General:comb";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "General:change";
    temp->Name = "sound/General_change.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "General:bi";
    temp->Name = "sound/General_instrument.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "General:bottle";
    temp->Name = "sound/General_openbottle.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.7f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "General:bottle";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "General:switch";
    temp->Name = "sound/General_switch.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "General:lullaby";
    temp->Name = "sound/music_sleep.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = true;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "General:babyClap";
    temp->Name = "sound/P005_babyexciting_01.mp3:sound/P005_babyexciting_02.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "General:babyCry";
    temp->Name = "sound/P005_babycry01.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = true;
    temp->Mutex = "General:babyCry,General:babyExciting,General:babyLaugh,General:babySmile，General:babyUnhappy";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "General:babyExciting";
    temp->Name = "sound/P005_babyexciting_01.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 1.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "General:babyCry,General:babyExciting,General:babyLaugh,General:babySmile，General:babyUnhappy";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "General:babyLaugh";
    temp->Name = "sound/P005_babylaugh.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 1.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "General:babyCry,General:babyExciting,General:babyLaugh,General:babySmile，General:babyUnhappy";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "General:babySmile";
    temp->Name = "sound/P005_babysmile.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 1.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "General:babyCry,General:babyExciting,General:babyLaugh,General:babySmile，General:babyUnhappy";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "General:babyUnhappy";
    temp->Name = "sound/P005_babyunhappy.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 1.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "General:babyCry,General:babyExciting,General:babyLaugh,General:babySmile，General:babyUnhappy";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "General:princessPain";
    temp->Name = "sound/General_anildle04.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "General:princessleld";
    temp->Name = "sound/General_anildle04.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "General:princessSad";
    temp->Name = "sound/General_sight.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = ":";
    temp->Name = "";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "Homepage:voice38";
    temp->Name = "sound/voice_title.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = ":";
    temp->Name = "";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:mp3music1";
    temp->Name = "sound/music_mp3_01.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = true;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:mp3music2";
    temp->Name = "sound/music_mp3_02.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = true;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:mp3music3";
    temp->Name = "sound/music_mp3_03.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = true;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:voice01";
    temp->Name = "sound/voice_01_1.mp3:sound/voice_01_2.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P001:voice01,P001:voice03,P001:voice04";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:idea";
    temp->Name = "sound/Common_tips01.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:creamOpen";
    temp->Name = "sound/General_open3.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:extrude";
    temp->Name = "sound/General_unguent.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:smear";
    temp->Name = "sound/General_unguent.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 1.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P001:smear";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:voice03";
    temp->Name = "sound/voice_03.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 3.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P001:voice03,P001:voice04";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:voice04";
    temp->Name = "sound/voice_04_1.mp3:sound/voice_04_2.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 3.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P001:voice03,P001:voice04";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:eat";
    temp->Name = "sound/P001_eat.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:voice02";
    temp->Name = "sound/voice_02_1.mp3:sound/voice_02_2.mp3:sound/voice_02_3.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 2.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P001:voice02";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:friut";
    temp->Name = "sound/P001_fruit.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.5f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:cover";
    temp->Name = "sound/P001_cover.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:shake";
    temp->Name = "sound/P001_stir.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = true;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:pouring";
    temp->Name = "sound/P001_pouring.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:hit";
    temp->Name = "sound/P001_hit.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:drink";
    temp->Name = "sound/P001_drink.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:princessSad";
    temp->Name = "sound/General_sight.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:voice05";
    temp->Name = "sound/voice_05.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 2.5f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P001:voice05";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:voice37";
    temp->Name = "sound/voice_37.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 3.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P001:voice37,P001:voice06";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P001:voice06";
    temp->Name = "sound/voice_06_1.mp3:sound/voice_06_2.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 2.5f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P001:voice37,P001:voice06";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = ":";
    temp->Name = "";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P002:voice07";
    temp->Name = "sound/voice_07.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 5.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P002:voice07";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P002:gulp";
    temp->Name = "sound/P002_gulp.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P002:drop";
    temp->Name = "sound/P002_drop.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P002:Bultrasonic";
    temp->Name = "sound/P002_Bultrasonic.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = true;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P002:voice09";
    temp->Name = "sound/voice_09.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P002:voice08,P002:voice07";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P002:echometer01";
    temp->Name = "sound/P002_echometer01.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P002:echometer02";
    temp->Name = "sound/P002_echometer02.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 1.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P002:sphygmomanometer01";
    temp->Name = "sound/P002_meter01.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P002:sphygmomanometer02";
    temp->Name = "sound/P002_meter02.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P002:voice08";
    temp->Name = "sound/voice_08.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P002:voice09,P002:voice07";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = ":";
    temp->Name = "";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P003:voice10";
    temp->Name = "sound/voice_10.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P003:windbell";
    temp->Name = "sound/P003_windbell_1.mp3:sound/P003_windbell_2.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 1.2f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P003:windbell";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P003:pillow";
    temp->Name = "sound/Common_tips02.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.7f;
    temp->Delay = 0.6f;
    temp->IsLoop = false;
    temp->Mutex = "P003:pillow";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P003:voice06";
    temp->Name = "sound/voice_06_1.mp3:sound/voice_06_2.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 2.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P003:voice06";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = ":";
    temp->Name = "";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P004:voice11";
    temp->Name = "sound/voice_11.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P004:jewelry";
    temp->Name = "sound/P004_jewelry.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P004:inlay";
    temp->Name = "sound/P004_inlay.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P004:voice12";
    temp->Name = "sound/voice_12.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 4.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P004:voice12,P004:voice13";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P004:clysis";
    temp->Name = "sound/P004_clysis.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P004:voice13";
    temp->Name = "sound/voice_13.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 3.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P004:voice12,P004:voice13";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P004:pull";
    temp->Name = "sound/P004_pull.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P004:push01";
    temp->Name = "sound/P004_push01.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P004:push02";
    temp->Name = "sound/P004_push02.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P004:breathe";
    temp->Name = "sound/P004_breathe.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P004:surgicalDrape";
    temp->Name = "sound/P004_surgicaldrape.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P004:cell";
    temp->Name = "sound/Common_tips03.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P004:metalput";
    temp->Name = "sound/Common_metalput.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.7f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P004:metalput";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = ":";
    temp->Name = "";
    temp->PlayMode = "";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:voice14";
    temp->Name = "sound/voice_14.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:voice15";
    temp->Name = "sound/voice_15.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 4.0f;
    temp->Delay = 0.5f;
    temp->IsLoop = false;
    temp->Mutex = "P005:voice15,P005:voice17";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:voice17";
    temp->Name = "sound/voice_17.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 4.0f;
    temp->Delay = 0.5f;
    temp->IsLoop = false;
    temp->Mutex = "P005:voice15,P005:voice17";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:voice16";
    temp->Name = "sound/voice_16.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:voice18";
    temp->Name = "sound/voice_18.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:push01";
    temp->Name = "sound/P004_push01.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:slide";
    temp->Name = "sound/P005_slide.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:write";
    temp->Name = "sound/P005_write.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 1.2f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:voice19";
    temp->Name = "sound/voice_19.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:babycloth";
    temp->Name = "sound/P005_babycloth_01.mp3:sound/P005_babycloth_02.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.7f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P005:babycloth";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:babycloth1";
    temp->Name = "sound/P005_babycloth1.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.7f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P005:babycloth1";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:voice20";
    temp->Name = "sound/voice_20.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:babyClap";
    temp->Name = "sound/P005_babyexciting_01.mp3:sound/P005_babyexciting_02.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:babyCry";
    temp->Name = "sound/P005_babycry_01.mp3:sound/P005_babycry_02.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 3.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P005:babyCry,P005:babyExciting,P005:babyLaugh,P005:babySmile，P005:babyUnhappy";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:babyExciting";
    temp->Name = "sound/P005_babyexciting_01.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 2.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P005:babyCry,P005:babyExciting,P005:babyLaugh,P005:babySmile，P005:babyUnhappy";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:babyLaugh";
    temp->Name = "sound/P005_babylaugh.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 2.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P005:babyCry,P005:babyExciting,P005:babyLaugh,P005:babySmile，P006:babyUnhappy";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:babySmile";
    temp->Name = "sound/P005_babysmile.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 2.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P005:babyCry,P005:babyExciting,P005:babyLaugh,P005:babySmile，P007:babyUnhappy";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:babyUnhappy";
    temp->Name = "sound/P005_babyunhappy.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 2.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P005:babyCry,P005:babyExciting,P005:babyLaugh,P005:babySmile，P008:babyUnhappy";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:babySleep";
    temp->Name = "sound/P005_babysleep.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:babySuck";
    temp->Name = "sound/P007_suck.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:unguent";
    temp->Name = "sound/General_unguent.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.7f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P005:unguent";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P005:babySmile1";
    temp->Name = "sound/P005_babysmile.mp3:sound/P005_babylaugh.mp3:sound/P005_babyexciting_02.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 5.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P005:babyCry,P005:babyExciting,P005:babyLaugh,P005:babySmile，P007:babyUnhappy";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = ":";
    temp->Name = "";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P006:falling";
    temp->Name = "sound/P006_falling.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P006:spray";
    temp->Name = "sound/P006_fallingwater.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.6f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P006:spray";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P006:voice21";
    temp->Name = "sound/voice_21.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P006:water";
    temp->Name = "sound/P006_water.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = true;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P006:soap";
    temp->Name = "sound/P006_soap.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.7f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P006:soap";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P006:bubble";
    temp->Name = "sound/P006_bubble.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P006:voice23";
    temp->Name = "sound/voice_23.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P006:latex";
    temp->Name = "sound/P006_latex_01.mp3:sound/P006_latex_02.mp3:sound/P006_latex_03.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.7f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P006:latex";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P006:stroke";
    temp->Name = "sound/General_stroke.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.7f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P006:stroke";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P006:voice24";
    temp->Name = "sound/voice_24.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P006:comb";
    temp->Name = "sound/General_comb.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.8f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P006:comb";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P006:voice25";
    temp->Name = "sound/voice_25.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P006:fallingwater";
    temp->Name = "sound/P006_babywater.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = ":";
    temp->Name = "";
    temp->PlayMode = "";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:crampOut";
    temp->Name = "sound/P007_crampout.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:clean";
    temp->Name = "sound/General_stroke.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.7f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P007:clean";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:throw";
    temp->Name = "sound/Common_subjectout.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:coverUp";
    temp->Name = "sound/General_open1.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:open";
    temp->Name = "sound/General_open3.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:spoon01";
    temp->Name = "sound/P007_spoon01.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.5f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:spoon02";
    temp->Name = "sound/P007_spoon02.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.3f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:shark";
    temp->Name = "sound/P007_shake.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:suck";
    temp->Name = "sound/P007_suck.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = true;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:durty";
    temp->Name = "sound/P007_durty.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:nappy";
    temp->Name = "sound/P007_nappy.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.7f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P007:nappy";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:quilt";
    temp->Name = "sound/P007_quilt.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:flour";
    temp->Name = "sound/P007_flour.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.5f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:switch";
    temp->Name = "sound/General_switch.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.7f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:gulp";
    temp->Name = "sound/P007_gulp.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = true;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:voice26";
    temp->Name = "sound/voice_26.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 3.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P007:voice26,P007:voice27,P007:voice28,P007:voice29";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:voice27";
    temp->Name = "sound/voice_27.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 4.5f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P007:voice26,P007:voice27,P007:voice28,P007:voice29";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:voice28";
    temp->Name = "sound/voice_28.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 6.5f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P007:voice26,P007:voice27,P007:voice28,P007:voice29";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P007:voice29";
    temp->Name = "sound/voice_29.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 4.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P007:voice26,P007:voice27,P007:voice28,P007:voice29";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = ":";
    temp->Name = "";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P008:voice30";
    temp->Name = "sound/voice_30.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P008:voice31";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P008:voice31";
    temp->Name = "sound/voice_31_1.mp3:sound/voice_31_2.mp3:sound/voice_31_3.mp3:sound/voice_31_4.mp3:sound/voice_31_5.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 2.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P008:voice31";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P008:takeoff";
    temp->Name = "sound/P008_takeoff.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 1.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P008:takeoff";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = ":";
    temp->Name = "";
    temp->PlayMode = "";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P009:voice32";
    temp->Name = "sound/voice_32.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 3.5f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P009:voice32,P009:voice33,P009:voice34,P009:voice35,P009:voice36";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P009:outdoor";
    temp->Name = "sound/P009_outdoor_01.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P009:voice33";
    temp->Name = "sound/voice_33.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 3.5f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P009:voice32,P009:voice33,P009:voice34,P009:voice35,P009:voice36";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P009:bear";
    temp->Name = "sound/P009_bear.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P009:voice34";
    temp->Name = "sound/voice_34.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 3.5f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P009:voice32,P009:voice33,P009:voice34,P009:voice35,P009:voice36";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P009:beach";
    temp->Name = "sound/P009_beach_01.mp3:sound/P009_beach_02.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P009:voice35";
    temp->Name = "sound/voice_35.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 3.5f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P009:voice32,P009:voice33,P009:voice34,P009:voice35,P009:voice36";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P009:palace";
    temp->Name = "sound/P009_palace01.mp3:sound/P009_palace02.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P009:voice36";
    temp->Name = "sound/voice_36.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 3.5f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "P009:voice32,P009:voice33,P009:voice34,P009:voice35,P009:voice36";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = "P009:Christmas";
    temp->Name = "sound/P009_Christmas.mp3";
    temp->PlayMode = "NoRepetitionRandom";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = ":";
    temp->Name = "";
    temp->PlayMode = "";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    temp = new SoundTemplate();
    temp->Key = ":";
    temp->Name = " ";
    temp->PlayMode = "";
    temp->Duration = 0.0f;
    temp->Delay = 0.0f;
    temp->IsLoop = false;
    temp->Mutex = "";
    temp->Volume = 0.0f;
    temp->MinDistance = 0.0f;
    temp->MaxDistance = 0.0f;
    mapdata.insert(std::make_pair(temp->Key,temp));
    
}